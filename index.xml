<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Hi-^_^</title>
    <link>https://Anlarry.github.io/</link>
    <description>Recent content on Hi-^_^</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Jiali Wang</copyright>
    <lastBuildDate>Sat, 18 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://Anlarry.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GNN Application in Recommendation</title>
      <link>https://Anlarry.github.io/posts/paper-reading/gnn-application-in-recommendation/</link>
      <pubDate>Sat, 18 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/posts/paper-reading/gnn-application-in-recommendation/</guid>
      <description>Prelude GNN是最近几年中机器学习较新的一个发展方向，也是学术界和工业界研究的热点话题。相比于node2vec、PageRank，GNN具有更强大的学习能力，能够更好得感知图数据。
GNN的一个经典应用场景是推荐系统。像淘宝这样的电商平台，大量的用户和商品，自然而然地形成了一个复杂异构图，一个直观想法是，可以利用GNN学习用户的兴趣特征，根据用户的历史浏览推荐用户更感兴趣的商品。而且这种方法的推荐质量也更高。
Pinterest Let&amp;rsquo;s begin with PinSage 1 GNN的开山制作——GCN 2把GNN训练用矩阵乘法来刻画，这样会导致一个问题，每一层每个点都要从他的邻居中读取feature (i.e. 全图训练)，导致GNN的复杂度非常高。
后来，一个点在他的部分邻居中读取feature（i.e. 图采样）就可以保证模型的准确度，这样就减低了GNN训练的成本。PinSage也是一个基于采样的GNN算法，是一个早期同时也非常经典的GNN算法。和GraphSage相比，最大的不同点在于用random-walk，采样的子图的质量会好一些。
比如上图就是一个两层的GNN, 在采样完成后我们会得到很多个子图（i.e. mini-batch）并喂给网络训练。每层网络都是如下图所示的图卷积操作，通过聚合特征（e.g. 取平均，求和）再通过一层神经网络得到一下层的输入。将多层图卷积stack到一起就构成了整个GNN，一般只有2-3层。
然而这和推荐系统有什么关系呢？在Pinterest中，有很多pin（类似淘宝的商品，在推荐系统中也称之为item），每个item会包含图片、文本信息，将图片和文本的embedding拼接到一起得到item的初始特征向量。在训练完GNN之后，通过推理得到每个item的嵌入向量，之后推荐系统就可以根据embedding向用户推荐新的item。
Recoommandation System at Pinterest 到推荐系统中，我们会认为每个item的embeddin向量是通过一个黑箱过程（i.e. PinSage），是提前已知的 3。我们的问题是，知道用户点击item历史序列$\mathcal{A}=\{a_1, a_2, &amp;hellip;\}$，我们想从$\mathcal{P}=\{p_1, p_2, &amp;hellip;\}$中预测下一个用户可能感兴趣的商品。
我们可以想到一些很直观的方法，比如历史的item求平均，还可以按时间给一个权重。但是这样的方法把用户的embedding限制在一个有限的向量里面，效果不是很好，因为一个用户兴趣面是是很广的，对不同种类的商品有不同的喜好。PinnerSage 3 会给用户维护一个不限大小的embedding，不同的种类的喜好都对应到一个嵌入向量。
然而还有另外一个问题——用户的历史序列会很长，计算的复杂度会非常大，影响推荐的系统的延迟。PinnerSage采用的方法是，通过聚类，每个商品都可以用一个类中心来表示。在推荐的时候，根据用户的action再给这些类中心一个重要性评分。最后用最重要的类（e.g. top 3）去预测下一个item。
总结一下PinnerSage的推荐过程分为3步：
用户历史动作序列聚类 得到类中心嵌入向量（Medoid based） 根据time decay计算类的重要度 找哪一个item最合适是一个索引过程，一般会通过cache加速查询。为了兼顾用户的长期兴趣和系统延迟，PinnerSage将任务分成两类，daily和online。在每天PinnerSage都会把用户的历史动作进行聚类的，得到类中心和重要度，这样可以保证和用户兴趣。而在online推荐的时候，只会对用最新的动作在已有的类上refine，降低推荐的延迟。
AliGraph 4 图数据规模的增大给GNN训练带来新的挑战，在工业界，图的规模会非常大，点和边往往是billion量级的。Ali坐拥最大的电商平台之一，大规模图神经网络既有真实的场景，同时也是一个亟须解决的问题。
AliGraph是ali的一个图神经网络框架。从系统的角度来看，AliGraph需要为上层用户提供应有的支撑，使得上层算法和应用开发可以仅仅关注自身的逻辑，而不用担心资源如何分配的问题。
面对超大规模的图，AliGraph通过parition把图分布式存在集群上，解决了存储的问题。同时通过维护cache，尽可能减少partition之间的通讯开销。同时AliGraph还需要实现常见的算子来支持上层GNN应用。AliGraph也进行了开源，GraphLearn 5，同时支持推理和训练任务。
GNN训练基本都是大同小异，而推理任务是部署和落地中主要workload，而且大部分的计算资源也是花在推理上。考虑到真实场景下，图一般是动态（e.g. 新用户的加入），GraphLearn后来增加了Dynamic Graph Service (DGS)来支持动态图的推理任务。
整个系统通过微服务的方式运行，每个模块被拆到subservices，模块之间都通过队列连接起来（e.g. kafka）。
美团广告推荐 6 可以发现在和Pinterest的推荐系统其实在设计上有很多共同点。
美团在推荐任务中有两个观察点：数据样本稀疏，广告投放后点击量非常少；用户兴趣存在时空特点，在不同时间点和地点用户有不同的兴趣点。通过异构图构建、注意力机制等方法解决的推荐不准确的问题。
整个推荐也分成online任务，保证请求低延迟；以及offline任务，用来更新图节点embedding，学习用户的长期兴趣。而整个系统的部署方式和GraphLearn也有一些相似性。
Challenges still exist 在很多业务场景下，图并不是静态不变的而是呈现出一种时间特征，一些点在$t_0$时加入，之后在$t_1$时删除。但是时序图GNN（TGNN）仍然是一个open的问题 7。在近几年GNN的发展中，开放的标准数据集（e.g. OGB 8）有着巨大的贡献，不论是GNN算法还是GNN系统开发，都会将OGB作为数据集和其他baseline比较。然而目前TGNN并没有对应的标准数据集，这样我们很难去比较不同来自不同团队的工作。另一个方面，GNN的收敛性和表达能力是可以被证明的，但是TGNN还是一个相对较新的算法，并没有GNN成熟，缺少基础的理论支撑。
GNN虽然网络层数少，计算资源需求不大，但是图和特征需要占用大量的存储资源，这给GNN部署和落地带来了一些挑战 9。</description>
    </item>
    
    <item>
      <title>2023</title>
      <link>https://Anlarry.github.io/book-reading/2023/</link>
      <pubDate>Sun, 01 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/book-reading/2023/</guid>
      <description>繁花 描绘上海20世纪60年代至90年代市民生活，字里行间洋溢着上海话的风格。
江南三部曲 理想与现实，最终以别样方式的和解。
毛泽东传 毛泽东，无产阶级革命的领导者，有着强烈的民族主义精神和斗争精神， 带领军队从井冈山走遍祖国大江南北，最终夺取统治权，在此期间作为一个诗人， 抒发对山河的感叹，洋溢着激情和傲气，“是风流人物还看今朝”。 在晚年，成为“半神半人式的人物”，“集真理和权力于一身”， 而中国政治局势则左右摇摆，处于各种混沌之中。
“如果我们今天不反对新八股和新教条主义，” 毛泽东在延安批评28个布尔什维克时曾说，“则中国人民的思想又将受另一种形式主义的束缚。”
Anyway, 毛主席还是非常伟大的，真正地改变了历史进程。
物理学家的智性冒险 在一篇篇简短的随笔的背后，是一个物理学家的热忱的心与深邃而广泛的思考。科学的发展，似乎呈现着一种连续性，古今之间的伟大思想彼此相连。
经济学原理：微观经济学分册 开拓新大陆——「经济学」！
巨人的陨落 一场巨变在泰-格温人物亮相后拉开序幕，各国之间错综复杂的利益链被一场刺杀转动，政客们唇枪舌战撕扯着利益的蛋糕🍰，打仗到最后已经忘记当初的打仗是为了什么。胜利者呼吁和平，并将巨额复仇赔偿单丢给战败者，埋下战争的种子。</description>
    </item>
    
    <item>
      <title>Unicode with xelatex</title>
      <link>https://Anlarry.github.io/posts/tool/xelatexunicode/</link>
      <pubDate>Thu, 10 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/posts/tool/xelatexunicode/</guid>
      <description>Unicode丰富了日常使用的字符集, 让我们可以使用一种简单便捷的方式表达各种奇怪的字符, 比如想要在输入一个雪人Snowman, U+2603
☃ latex作为日常使用的排版工具, 怎么在latex中插入一个unicode? 一般来讲, 应该Ctrl+C, Ctrl+V就可以, 我们来看看下面的代码
\documentclass[utf8]{article} \begin{document} \huge Unicode char \texttt{U+13105} is 𓄅 Unicode char \texttt{U+16E4} is ᛤ Unicode char \texttt{U+25E6} is ◦ \end{document} 然而输出的PDF中并没有包含所有的Unicode字符, 看起来这个问题还存在一定的共性unicode-characters-not-displaying-in-xetex, 而且似乎是个字体问题.
Tex Engine使用xelatex
我们来试试更换为FreeMono字体
\documentclass[utf8]{article} \usepackage{fontspec} \setmainfont{FreeMono} \begin{document} \huge Unicode char \texttt{U+13105} is 𓄅 Unicode char \texttt{U+16E4} is ᛤ Unicode char \texttt{U+25E6} is ◦ \end{document} Ha!现在ᛤ已经可以正常显示了, 𓄅却变成了一个奇怪字符. 其实这是因为在FreeMono字体中缺失字符𓄅, 而ᛤ之所以能显示是因为FreeMono包含了这个字符.
因此我们可以发现, 在xelatex中使用Unicode, 需要使用正确的字体, 即字体中要包含应相应的unicode字符.
那新的问题来了, 怎么知道什么字体包含了𓄅? 逛了一圈stackoverflow发现fileformat.info可以解决这个问题.
𓄅其实在Egyptian Hieroglyphs中, 找到相应的字体Noto Sans Egyptian Hieroglyphs</description>
    </item>
    
    <item>
      <title>2022-Fabula</title>
      <link>https://Anlarry.github.io/book-reading/2022-fabula/</link>
      <pubDate>Sat, 01 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/book-reading/2022-fabula/</guid>
      <description>Fabula means story, which is a topic in A brief history of humankind
简史三部曲 A brief history of humankind Homo Deus：A Brief History of Tomorrow 21 Lessons for the 21st Century 从史前到未来，再回到21世纪的旅行，有各种各样的意义之网。
To Kill a Mocking Bird “依然是夏天，孩子们走近了。男孩身后拖着根鱼竿踯躅不前。一个男人双手叉腰站在那里等他。夏天，他的孩子们在前院和朋友玩耍，自编自演着他们古怪的小话剧。
秋天，他的孩子们在杜博斯太太房前的人行道上打架。男孩扶着他妹妹站起来，过后他们一起走回家去。秋天，他的孩子们小跑着来回经过那个街角，每天的苦恼和得意都写在脸上。他们在橡树前停下了，表情又欣喜又困惑，还带着忧虑。
冬天，他的孩子们在院门前哆嗦着，黑色的剪影衬着熊熊燃烧的房屋。冬天，那男人走上街头，扔下眼镜，射死了一只疯狗。
夏天，他眼看着他的孩子们心碎了。又到了秋天，怪人的孩子们需要他了。”
进化心理学 从人类进化以适应生存问题的角度解释人类的行为。
饮食的思迷 以摄入的能量等指标来衡量也可能并不合理，即使是相同的东西在不同人身上也会有不同的效果。我们不得不考虑微生物在这一过程中的 影响。虽然很多东西还不能得以解释，但总之多样性应该是对的。
权衡 权衡各方因素，同时也Keep Open Mind！
我与父辈 发展中的城乡差距之大，与描绘的年代相近的《繁花》中的上海，天壤之别啊。</description>
    </item>
    
    <item>
      <title>FlexSC</title>
      <link>https://Anlarry.github.io/posts/paper-reading/flexsc/</link>
      <pubDate>Fri, 10 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/posts/paper-reading/flexsc/</guid>
      <description>System Call Cost 应用程序通过System Call向kernel请求服务。一般应用程序发起系统调用后，从用户态进入内核态，最后从异常退出，返回用户态。
但是这种同步的系统调用机制可能对应用的性能带来限制：
Direct Cost: 在系统调用后，CPU会清空流水线。 Indirect Cost: 程序的局部性以及cache可以提升性能。但是在系统调用后，要在kernel空间执行代码，这就会影响cache性能。而且在kernel处理结束返回用户后，相比与原来的cache，cache受到了污染，带来间接性能损失。 可以看到在系统调用后，IPC(Instructions Per Cycle)降低。
Exception-Less System Call exception-less系统调用，让系统调用异步完成。在user和kernel共享一些syscall pages，用这些syscall page记录当前请求的系统调用。用户发起系统调用后，在syscall pages中添加新的entry后就可以返回。同时，有一些特殊的kernel thread，syscall thread，在syscall pages中找到请求的系统调用，把返回值写在相应的条目。最后用户就通过可以检查syscall pages，拿到返回值。
那这种将invoke和execute解耦的设计怎么做有什么好处呢？
可以推迟执行，把syscall按batch执行，降低mode之间转化的代价，improve temporal locality。 对于多核系统，可以把syscall放在另一个核上执行，这样就可以降低间接代价，improved spatial locality。 Implementation 在实现时，作者添加两个新的系统调用，都采用同步的系统调用机制。
flexsc_register，做一些syscall page的映射，并创建syscall thread，数量等于page中entry的数量。 flexsc_wait，因为这种异步机制，会出现用户需要停下来等待系统调用的完成。 syscall thread的调度，会影响exception-less syscall的性能。对于单核，调用flexsc_wait后，调度syscall thread处理page中每个entry，如果出现阻塞，就用新的syscall thread接着处理一下个entry。多核时，one syscall thread per application and core，这样就带来了并行处理的可能。
FlexSC Threads 但是这样异步方式，可能会让使用变得复杂，而且随着多核的发展，作者就实现了FlexSC-Threads。利用dynamic loading，系统调用时，调用一个wrapper，这样就可以让应用得到free lunch。
维护$M$个user-mod thread，对一个process，每个核上只有一个可以被kernel看见。发起系统调用的线程，在写好entry后，就会被切换执行一下thread。用完ready的user-mode thread，就看看syscall page上有没有完成的。如果还没有ready的，就需要调用下flexsc_wait。
对于这种设计，需要提高并发，来提升性能。highly threaded workloads是FlexSC-Threads的理想环境。
Reference
[1] Soares L, Stumm M. FlexSC: Flexible System Call Scheduling with Exception-Less System Calls[C]//Osdi.</description>
    </item>
    
    <item>
      <title>NextDoor</title>
      <link>https://Anlarry.github.io/posts/paper-reading/nextdoor/</link>
      <pubDate>Sun, 14 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/posts/paper-reading/nextdoor/</guid>
      <description>Background 基本各种东西都可以用图来表示，也就促成了GNN的快速发展。然而很多图都有这样的特点，一些节点的度数很高然而大多数节点的度数很低。
训练时要用邻居更新当前节点，不能将整个图全部拿来训练，因此一般采用graph sampling+mini batch，比如，给$n$个节点，每个节点对邻居采样后在进行训练。
然而产生了新的问题，采样在整个训练过程中占了很多时间。
因此，大家也会去想用GPU加速采样，但是naive的方法并不能很好的利用GPU。
&amp;ldquo;Transit-Parallelism&amp;rdquo; 作者首先对采样进行了抽象，采样从一节点开始，扩展出新的节点加入sample，再从新的节点扩展$\cdots$，每次遍历邻居扩展新节点的节点，作者把它叫做&amp;quot;transit vertices&amp;quot;
将采样分成两类：
Individual Transit Sampling，这个是按节点来的，每个transit节点从邻居中采样一定数量的节点 Collective Transit Sampling，这个是按层来，每一层从所有transit节点的邻居中采样一定数量的节点 CUDA &amp;amp; GPU
一个CUDA程序被划分给很多blocks of threads完成并行，而GPU又由很多StreamingMultiprocessors (SMs)构成，每个block被放到SM上执行
一个block的线程数是有限的，但是相同的大小block可以被组织成grid，于是kernel(a c++ function)就可以用grid里面所有的线程。 $$ thread \xrightarrow[]{array} block \xrightarrow[]{array} grid $$ 众所周知，内存层次结构，GPU当然也有：
前面已经提到了block会在SM上执行，在物理实现时会用到SIMT(Single-Instruction, Multiple-Thread)。multiprocessor用warp(a group of 32 threads)来管理线程。
warp中的线程都从相同的起点开始，但是每个线程都有自己的pc，寄存器状态也可能不一样。而且一个warp的thread执行的指令还是相同的。
如果就是普通的没有控制流的代码，大家就一起执行。那遇到分支怎么办，每个线程可能有不同的路径。这时就会变成串行。warp去执行每个分支路径，不在路径上的thread就等着。这就可能会很影响并行，也就是Branch divergence。
Sample-Parallelism，对于Individual Transit Sampling可以将每一对sample和transit分配$m_i$个线程，每个sample放到一个block里。对于Collective Transit Sampling，需要先把所有的邻居存到global memory里，再采样。
在采样时，邻居多的节点计算的时间就会更久。如果同一个warp里面的两个thread被分给两个邻居数量不同的transit，就会有divergence。而且，图得存在gobal memory，shared memory利用不充分。
但是如果是按transit划分，局部性就会更好，按照工作量需求分配线程数量。是不是有点像倒排索引 :-)
线程组中的线程，他们做的事情更相似，而且工作量也差不多。他们访问的邻居也是同一个transit的，能更好利用share memory。
Sampling Large Graphs NextDoor还可以去对超出GPU memory的图采样。方法有点像mini batch，把图分成不相交的子图，每次对一个子图和和其transit节点采样。
Reference
[1] Jangda A, Polisetty S, Guha A, et al.</description>
    </item>
    
    <item>
      <title>Active Learning for ML Enhanced Database Systems</title>
      <link>https://Anlarry.github.io/posts/paper-reading/active-learning-for-ml-enhanced-database-systems/</link>
      <pubDate>Fri, 22 Oct 2021 16:35:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/paper-reading/active-learning-for-ml-enhanced-database-systems/</guid>
      <description>Intro &amp;amp; Background ML模型会因为训练和测试时的数据分布不同，导致很多预测错误。将ML模型优化database也面对这个问题。
Active learning Active leraning 主动学习采用的方法是，可以在unlabled的数据中再选出一些数据，从orcale得到数据的lable，从新的知识中学习。
An illustrative example of pool-based active learning Execution cost prediction &amp;amp; Plan regression prediction ECP是一个回归任务，需要预测执行plan需要的时间。在优化查询中，可以用ECP来寻找最优的plan PRP是一个分类任务，给出两个plan，需要找到哪个plan代价更高 Architecture 在这里oracle可以用database的副本执行plan，获取plan的执行时间。因此不同的plan就有不同的cost。
开始，用户指定budget，之后ADCP获取lable数据时会消耗budget。ADCP获取target data，选出unlabeled data给交给副本执行。获得新知识后retrain ML模型，再对target data数据进行预测，这时错误就会降低。
但是新的环境就有新的问题。active learning需要选出要标注的数据，noise会带来一些问题。因此需要综合考虑cost、robust、以及active learning最不确定的unlabel数据。 $$ w_x=\frac{u(x)}{c(x)} $$ $c(x)$表示cost，$u(x)$表示uncertainty，因此x的权重可以理解成“uncertainty per cost”。
同时为了解决noise，转化为概率并加入Gumbel噪音
$$ p(x)=\frac{w_x}{\sum_{x&amp;rsquo;}w_{x&amp;rsquo;}} \newline {\rm arg}\ \max\limits_{x} \log p(x)+G_x $$
另外，还需要减少sample时的冗余。
Algo &amp; Example Comparison &amp;amp; Why it works HAL相比于其他AL策略利用了各种不同的特点。感觉这是为什么HAL可以work的一个原因。在实验中，OPT(A crude baseline)直接用cost估计(for PRP)，Huber回归(for ECP)得到label不用retrain也不需要额外的label，比其它AL错误要高出很多。
Strategy Properties 在同样的bugdet下，HAL选出了更多的label，也就是说平均每个label的cost更低(a)。但是，对cost超过平均值的数据，error也更低(b)。</description>
    </item>
    
    <item>
      <title>SkyBridge &amp; XPC</title>
      <link>https://Anlarry.github.io/posts/paper-reading/skybridge-xpc/</link>
      <pubDate>Thu, 16 Sep 2021 19:17:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/posts/paper-reading/skybridge-xpc/</guid>
      <description>Inter-Process Communication 微内核相比与宏内核，具有更好的扩展性、安全性，也能够更好地容忍错误。但是微内核只保留很基本的功能，很多服务都作为一个用户进程存在，进程之间大量使用IPC传递消息。
另外在宏内核中也会经常使用IPC，如Android Binder。
Optimize synchronous IPC 一般IPC过程需要经过内核，这个过程需要保存用户态状态，当退出内核时还需恢复用户状态。因为每个进程都在自己的虚拟地址空间中，IPC过程还需要切换虚拟地址空间。另外还有一些逻辑需要处理。这些都导致IPC有较高的延迟。
seL4用fastpath降低IPC延迟，消息会被立即发送，让kernel直接切换到server进程避免了调度器，因此可以提升IPC性能。但是也无法避免kernel。
另一方面当传递的消息较大时，IPC一般需要将消息复制到内核，再从内核复制到另一个进程。或者使用共享内存，减少一次复制。
在seL4上测试负载，IPC占用的时间是很多的。
SkyBridge 为了提高IPC性能，SkyBridge想法是IPC不经过kernel,sender可以直接调用receiver的procedure。不进过kernel如何调用receiver呢？似乎需要一个新的模块完成这个功能，SkyBridge利用Intel为虚拟化提供的硬件，EPT(extended page table) 切换，允许在用户态下切换EPT，这样就可以实现在用户态下切换虚拟地址空间。
但是为了利用EPT切换，就需要在增加一个hypervisor。（有可能会影响性能）
在虚拟机中运行的进程，如果要访问内存会经过
GVA(Guest virtual address)➡GPA(Guest physical address)➡HPA(Host physical address)
这样的两级地址转换，经过Guest页表得到GPA，再经过EPT得到HPA
同时SkyBridge中的每个进程都在自己的虚拟空间中，彼此之间相互隔离。如果通过将进程放在同一个虚拟空间，然后用EPT将他们隔离，这样的话当进程数很多的时候就会比较复杂。
从上图可以看到SkyBridge的两个kernel：RootKernel( a tiny hypervisor)和SubKernel(即microkernel)。
首先server在kernel中注册。kernel会吧trapoline-related代码和数据映射到server的虚拟空间，并返回一个ID用来给client调用。client向kernel注册时提供1server ID,kernel同样将代码和数据映射到他的虚拟空间。
Subkernel调用Rootkernel的借口让server和client在EPT level上绑定，kernel会为client和server配置EPT。配置server的EPT时，SkyBridge把client的页表映射到相应server的页表。client调用direct_server_call，切换至server的EPT后使用server的页表翻译后续的地址。trapoline代码安装server的stack,调用handler。
在执行过程中，client的CR3(页表地址)不会发生改变，SkyBridge将client CR3的HPA映射为server C3的HPA，这样就相当于切换到了server的空间。
something else RootKernel &amp;amp; 虚拟化开销，Rootkernel只提供最基本的功能，同时为了降低VM exit，Rootkernel允许像更改CR3的指令不触发VM exit、让外部中断直接到microkernel处理。为了解决EPT violation，Rootkernel用1GB的页，把大部分host物理内存映射到microkernel（除了Rootkernel保留的部分，大概100MB）。这样microkernel访问物理地址时，就不会有EPT iolation。这样不仅降低了处理TLB miss的时间，也降低了TLS miss的次数。
illegal VMFUNC，可能会导致一些安全问题。SkyBrdige的方法是功能相同的指令替换之前的指令。
XPC 但是SkyBridge需要工作在虚拟化环境中，而且当出现调用链的时候（e.g., A$\rightarrow$B$\rightarrow$C）这样出现消息被多次复制的情况。
XPC从两个方面提高IPC性能，
让IPC不经过kernel 不复制传递消息 和SkyBridge一样XPC也属于硬件优化IPC，SkyBridge通过VMFUNC, XPC则通过在新的硬件，XPC engine。XPC engine提供了IPC的基本功能，如capability检查、上下文切换、高效轻量级的消息传递机制(relay-seg)。
XPC engine提供了两个硬件原语：User-level Cross Process Call，Lightweight Message Transfer
Cross Procss Call x-entry, 和其他进程的procedure绑定。每个进程可以创建多个x-entry,所有的x-entry都存在x-entry-table（x-entry-table-reg指向的一个全局内存空间）中。通过x-entry-table-size控制x-entry-table的大小。xcall-cap(XPC call capability)记录每个entry的capability。</description>
    </item>
    
    <item>
      <title>2021-PrimusLiber</title>
      <link>https://Anlarry.github.io/book-reading/2021-primusliber/</link>
      <pubDate>Fri, 01 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/book-reading/2021-primusliber/</guid>
      <description>Primus liber means the first book in latin, and means first commit here in some way.
2021 Project Hail Mary
讲述Grace和外星人Rocky一起“用魔法对抗魔法”（Astrophag和Taumoeba）的星际旅行故事，Save Earth &amp;amp; Save Erid。
Rich Dad, Poor Dad
从一个与众不同的思路，讲述理财的重要性，从不同的角度再思考这个问题。</description>
    </item>
    
    <item>
      <title>Codeforces Round #664</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/codeforces-round-664/</link>
      <pubDate>Tue, 01 Sep 2020 19:40:00 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/codeforces-round-664/</guid>
      <description>Codeforces Round #664 https://codeforces.com/contest/1395
A 题意
给四种颜色的球，可以把一个红色一个蓝色一个绿色染成白色，问能不能变成回文串
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; //#include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>Gym 102501部分题解</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/gym-102501%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</link>
      <pubDate>Mon, 31 Aug 2020 21:18:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/gym-102501%E9%83%A8%E5%88%86%E9%A2%98%E8%A7%A3/</guid>
      <description>Gym - 102501D Gnalcats https://codeforces.com/gym/102501/problem/D
题意 给两种栈操作判断是否相等,如果两个操作都fail，也认为相等
Solution 模拟，每个氨基酸一个hash值。通过判断最后栈元素是否对应hash相等，判断操作是否相等
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; //#include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;cassert&amp;gt; #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>Gym 102460L Largest Quadrilateral </title>
      <link>https://Anlarry.github.io/posts/acm-icpc/gym-102460l-largest-quadrilateral/</link>
      <pubDate>Thu, 27 Aug 2020 00:01:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/gym-102460l-largest-quadrilateral/</guid>
      <description>Gym 102460L Largest Quadrilateral Largest Quadrilateral
题意 给$n$个点从中选出四个点，使得面积最大
Solution 首先，肯定是求凸包，要求的点一定在凸包上。 不难联想到凸包对每个边求最大三角形面积的问题，也就是旋转卡壳。 可以将问题转化为，对凸包的每一个对角线$A_iA_j$，求最大面积的两个三角形，$\triangle{A_iA_jP}$, $\triangle{A_iA_jQ}$, 然后就可以枚举对角线，旋转卡壳算最大面积 细节
输出的格式 凸包上应该留下共线的点 #include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; //#include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;cassert&amp;gt; // #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>Codeforces Round #663</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/codeforces-round-663/</link>
      <pubDate>Mon, 17 Aug 2020 22:42:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/codeforces-round-663/</guid>
      <description>Codeforces Round #663 http://codeforces.com/contest/1391
C 题意
对于一个排列${p_1, p_2, \dots, p_n}$，对于每个数字$p_i$，向前找第一个大于$p_i$的$p_j$，$i$和$j$连一条边，向后同理。求多少种排列生成的图是有环的
Solution
对于$p_i$，如果存在$p_j&amp;gt;p_i(j&amp;lt;i)$, $p_k&amp;gt;p_i(k&amp;gt;i)$，那么就是存在环的 那么对于$\forall i$都不成立时，就没有环 此时就是序列的特点就是,数字$n$左边和右边向两边递减 因此排列数就是$n!-2^{n-1}$ #include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;cassert&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>Codeforces Round #660</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/codeforces-round-660/</link>
      <pubDate>Wed, 12 Aug 2020 01:01:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/codeforces-round-660/</guid>
      <description>Codeforces Round #660 https://codeforces.com/contest/1388
E 题意
平面上有一些线段，将他们投影到$x$轴上，使得彼此不想交(但是可以挨着)，设最左边的点和最右边的点的横坐标分别是$x_l, x_r$， 求$min{x_r-x_l}$
Solution
首先对于两个线段$s_1, s_2$, 并且$s_1.y &amp;lt; s_2.y$, 交叉连接他们的左右端点，得到一个向量集合$bound$，对投影向量限制限制。 因此先两两枚举，得到投影向量的可行的取值。
而且最优的投影向量，是集合$bound$中的某一项
因此，对剩下的可行的投影向量, 假设当前枚举的方向是$k_i$，计算
$$ max{x_j+y_jKi}-min{x_j+y_jk_i} $$
计算这个式子可以用Convex hull trick, 然后不断更新ans
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;bitset&amp;gt; #include &amp;lt;unordered_map&amp;gt; #include &amp;lt;assert.h&amp;gt; #include &amp;lt;list&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>nowcoder 2020 多校 第三场</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/nowcoder-2020-%E5%A4%9A%E6%A0%A1-%E7%AC%AC%E4%B8%89%E5%9C%BA/</link>
      <pubDate>Tue, 11 Aug 2020 16:08:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/nowcoder-2020-%E5%A4%9A%E6%A0%A1-%E7%AC%AC%E4%B8%89%E5%9C%BA/</guid>
      <description>nowcoder 2020 多校 第三场 E Two Matchings 题意
可以简化题意为，每个点有个权重$w$，两个点$i,j$相连的代价$abs(w_i-w_j)$,找两个没有重叠的匹配使得代价最小
Solution
其实就是在将数字用长度为偶数的环连起来，求最小代价。进一步可以发现，环用长度为4或6，长度更长的环可以被分解达到更小的代价
LL n; LL a[MAX]; LL dp[MAX][2]; LL four(const vector&amp;lt;LL&amp;gt; &amp;amp;a){ return 2LL * (a[3]-a[0]); } LL six(const vector&amp;lt;LL&amp;gt; &amp;amp;a){ return 2LL * (a[5]-a[0]); } int main(){ #ifdef DEBUG freopen(&amp;#34;in&amp;#34;, &amp;#34;r&amp;#34;, stdin); #endif int T; scanf(&amp;#34;%d&amp;#34;, &amp;amp;T); while (T--) { cin &amp;gt;&amp;gt; n; for(int i = 0; i &amp;lt; n; i++) cin &amp;gt;&amp;gt; a[i]; sort(a, a+n); for(LL i = 0; i &amp;lt;= n; i++ ) dp[i][0] = dp[i][1] = __64inf; dp[3][0] = 2LL * (a[3]-a[0]); dp[5][0] = 2LL * (a[5]-a[0]); dp[7][0] = 2LL * (a[7]-a[4] + a[3] - a[0]); for(LL i = 9; i &amp;lt; n; i+=2){ dp[i][0] = min(dp[i-4][0], dp[i-4][1]) + four(vector&amp;lt;LL&amp;gt;({a[i-3], a[i-2], a[i-1], a[i]})); dp[i][1] = min(dp[i-6][0], dp[i-6][1]) + six(vector&amp;lt;LL&amp;gt;({a[i-5], a[i-4], a[i-3], a[i-2], a[i-1], a[i]})); } printf(&amp;#34;%d\n&amp;#34;, min(dp[n-1][0], dp[n-1][1])); } } F Fraction Construction Problem 题意</description>
    </item>
    
    <item>
      <title>nowcoder 2020 多校 第五场</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/nowcoder-2020-%E5%A4%9A%E6%A0%A1-%E7%AC%AC%E4%BA%94%E5%9C%BA/</link>
      <pubDate>Fri, 07 Aug 2020 16:34:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/nowcoder-2020-%E5%A4%9A%E6%A0%A1-%E7%AC%AC%E4%BA%94%E5%9C%BA/</guid>
      <description>nowcoder 2020 多校 第五场 https://ac.nowcoder.com/acm/contest/5670
B Graph tire树，最小生成树
题意：
给一个带有边权的树，可以删除或添加边，但要保证：
图联通 环上边权异或为0 Solution
不管怎么操作，两点路径上边权的异或值是固定的，于是问题就转化成一个最小生成树问题。每次选出不联通的点集$S_1$, $S_2$, 将他们联通的代价是
$$ \min\limits_{u\in S_1 v\in S_2} {\mathord{dis}(u,v)} $$
可以通过tire树实现这个过程，就是tire树合并子节点，复杂度为$O(n\log n)$
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;bitset&amp;gt; #include &amp;lt;unordered_map&amp;gt; #include &amp;lt;assert.h&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>POJ 3376</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/poj-3376/</link>
      <pubDate>Wed, 05 Aug 2020 10:08:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/poj-3376/</guid>
      <description>POJ 3376 tire + manacher
题意 http://poj.org/problem?id=3376 给$n$个串，两两连接，一共$n^2$种，求其中有多少是回文， 字符串的长度和小于$2e6$
Solution 在考虑第$i$个串$t$和多少个串$s$拼接是回文时，计算$s+t$是回文的数量，将所有数量累加就是最终的回文数。
首先考虑什么情况下，两个串拼接会是一个回文串。
case 1： s=reverse(t)
$$ \begin{cases} s = a_0\dots a_{n-1} \newline t = a_{n-1}\dots a_0 \end{cases} $$
case 2
$$ \begin{cases} \begin{matrix} &amp;amp;\mathrm{palindrome} \newline s = a_0\dots a_i &amp;amp;\overbrace{a_{i+1}\dots a_{n-1}} \end{matrix} \newline \newline t = a_i\dots a_0 \end{cases} $$ 以及对称的情况 $$ \begin{cases} s = a_{n-1}\dots a_i \newline \begin{matrix} \ \ \ \ \ \mathrm{palindrome} &amp;amp;\newline t = \overbrace{a_0\dots a_{i-1}} &amp;amp;a_i\dots a_{n-1} \end{matrix} \end{cases} $$</description>
    </item>
    
    <item>
      <title>nowcoder 2020 多校 第二场</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/nowcoder-2020-%E5%A4%9A%E6%A0%A1-%E7%AC%AC%E4%BA%8C%E5%9C%BA/</link>
      <pubDate>Tue, 14 Jul 2020 23:18:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/nowcoder-2020-%E5%A4%9A%E6%A0%A1-%E7%AC%AC%E4%BA%8C%E5%9C%BA/</guid>
      <description>nowcoder 2020 多校 第二场 https://ac.nowcoder.com/acm/contest/5667
A All with Pairs 题意
给$n$个串，定义$f(s,t)$为$s$前缀和$t$后缀最长的长度，求$\sum_i\sum_j f(s_i, s_j)^2$
Solution
先把每个串的后缀hash的值存下来，对每个串$s_i$,求$\sum_j f(s_i, s_j)^2$。对于$s_i$的每个前缀都可以查询hash求出 对应多少后缀，但是有可能一对$s_i, s_j$会有多个贡献，因此要用next数组去重
const unsigned long long base = 131; // vector&amp;lt;string&amp;gt; str; string str[MAX]; unordered_map&amp;lt;unsigned long long, int&amp;gt; mp; int nex[MAX]; int cnt[MAX]; void get_hash(const string &amp;amp;s){ unsigned long long res = 0; unsigned long long p = 1; for(int i = s.size()-1; i &amp;gt;= 0; i--){ // unsigned long long x = s[i] - &amp;#39;a&amp;#39;+1; res += (s[i]-&amp;#39;a&amp;#39;+1) * p; p *= base; mp[res]++; } } void get_next(const string &amp;amp;t){ nex[0] = -1; int k = -1; for(int i = 1; i &amp;lt; t.</description>
    </item>
    
    <item>
      <title>AtCoder-Sum of gcd of Tuples</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/atcoder-sum-of-gcd-of-tuples/</link>
      <pubDate>Sat, 25 Apr 2020 00:41:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/atcoder-sum-of-gcd-of-tuples/</guid>
      <description>AtCoder-Sum of gcd of Tuples (Hard) 题意 https://atcoder.jp/contests/abc162/tasks/abc162_e
求$\sum\gcd(a_1,a_2,\cdots,a_n)$,其中$a_i\in[1,K]$
Solution 直接计算肯定是不好计算的，可以考虑按$gcd$的值进行分类，问题就转化为一个计数问题
$\displaystyle \gcd(a,b)=d\Rightarrow\gcd(\frac{a}{d},\frac{b}{d})=1$
$\displaystyle {\gcd(a_1,\cdots, a_n)=d的数量}={\gcd(\frac{a_1}{d},\cdots,\frac{a_n}{d})=1的数量}$
那么，
$$ Ans=\sum_{d=1}^{K}dF(\lfloor\frac{K}{d}\rfloor, N) $$
其中$F(K,N)$表示$\gcd(a_1,\cdots,a_N)=1$的个数，$a_i\in[1,K]$
可以用容斥算出$\displaystyle F(K,N)=K^N-\sum_{i=1}^{K}F(\lfloor\frac{K}{i}\rfloor)$
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; // #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>CSAPP arch lab</title>
      <link>https://Anlarry.github.io/posts/csapp/csapp-arch-lab/</link>
      <pubDate>Mon, 16 Mar 2020 21:24:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/csapp/csapp-arch-lab/</guid>
      <description>arch lab Download archlab-handout
安装模拟器 解决undefined reference to ’matherr‘
参考 Y86-64模拟器的安装与出现对&amp;rsquo;matherr&amp;rsquo;未定义引用问题的解决
Part A 在这部分要在sim/misc中完成，我们要编写和模拟三个Y86-64程序
sum.ys： 遍历链表求和
# begin at 0 .pos 0 irmovq stack,%rsp call main halt .align 8 ele1: .quad 0x00a .quad ele2 ele2: .quad 0x0b0 .quad ele3 ele3: .quad 0xc00 .quad 0 main: irmovq ele1,%rdi call rsum ret rsum: xorq %rax,%rax andq %rdi,%rdi je L1 pushq %rbx mrmovq (%rdi),%rbx mrmovq 8(%rdi),%rdi call rsum addq %rbx,%rax popq %rbx L1: ret .</description>
    </item>
    
    <item>
      <title>CodeChef - PRIMEDST</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/codechef-primedst/</link>
      <pubDate>Sun, 01 Mar 2020 12:09:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/codechef-primedst/</guid>
      <description>Prime Distance On Tree 题意 Prime Distance On Tree
给个树，从树上随机选取一对点$u,v$,求$\delta(u,v)$是素数的概率
Solution 可以从生成函数的角度考虑
假设rt是一个树的树根，而且rt的深度是d，将树中节点的深度统计出来，记为$f_{rt，d}$，如果$u,v&amp;hellip;$是rt的子节点，那么rt对答案的贡献就是生成函数中素数项的系数，那么问题就是怎么计算生成函数了
$$ \sum_{u,v \in son(rt)} f_{u,1} * f_{v, 1} $$
这个式子中的素数项系数和与下式是相等的,计算$f$是很简单的
$$ \Big(f_{rt,0}^2 - \sum_{u \in son(rt) }f_{u,1}^2\Big) / 2 $$
为了确保复杂度不会太高，需要用点分治
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; // #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>波里亚计数</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/%E6%B3%A2%E9%87%8C%E4%BA%9A%E8%AE%A1%E6%95%B0/</link>
      <pubDate>Fri, 14 Feb 2020 00:46:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/%E6%B3%A2%E9%87%8C%E4%BA%9A%E8%AE%A1%E6%95%B0/</guid>
      <description>Polya计数 将波利亚计数定理整理在这里，作为一个总结和介绍，也方便以后复习
为什么学习Polya计数定理
通过Polya计数定理，我们可以计算等价类的数量，比如下面这个问题：
用$m$种颜色给一个正方形染色，如果正方形可以自由转动，求染色方案数
让我们从一些概念开始
1 等价关系 1.1 等价关系的定义 假设$V$是一个集合，$S$是定义在$V$上的一个关系，若$S$有如下性质：
自反性 传递性 对称性 那么， $S$就是一个等价关系
$a$和$b$有关系$S$,可以记为$aSb$
假设定义关系$S$，图形$a$可以旋转得到$b$ $\Leftrightarrow$ $aSb$
例如图中的$方块_1$和$方块_2$具有关系$S$，即他们可以通过旋转得到彼此，而$方块_1$和$方块_2$则没有关系$S$
1.2 等价类 通过上图，可以看出来：$方块_1$和$方块_2$是同一类的，而$方块_1$和$方块_2$则是另外两类，于是可以想到集合$V$上的等价关系$S$将集合的元素划分到不同的类中，我们把它称为等价类
而包含元素$a$的等价类则是由满足$aSb$的所有元素$b$组成的(当然也包含元素$a$),即$C(a)={b\in V | \ aSb}$
仔细想一想，不难发现两个不同等价类是不相交的
2 置换群 2.1 置换群的定义 假设$A={1,2,\dotsc, n}$，通过置换，将$A$中的元素重新排列，得到另一个排列$a_1, a_2, \dotsc, a_n$，可以把这个过程写成
$$ \left ( \begin{matrix} 1 &amp;amp; 2 &amp;amp; \dotsc &amp;amp; n \newline a_1 &amp;amp; a_2 &amp;amp; \dotsc &amp;amp; a_n \end{matrix} \right ) $$
所以，可以将置换看成一个双射函数$f:{1,2,\dotsc, n} \rightarrow {1,2,\dotsc, n}$
置换之间也可进行合成运算
$$ \pi_1 = \left ( \begin{matrix} 1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 \newline 4 &amp;amp; 2 &amp;amp; 1 &amp;amp; 3 \end{matrix} \right ) \ \ \pi_2 = \left ( \begin{matrix} 1 &amp;amp; 2 &amp;amp; 3 &amp;amp; 4 \newline 2 &amp;amp; 1 &amp;amp; 4 &amp;amp; 3 \end{matrix} \right ) $$</description>
    </item>
    
    <item>
      <title>Rock Paper Scissors Lizard Spock</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/rock-paper-scissors-lizard-spock/</link>
      <pubDate>Tue, 11 Feb 2020 15:40:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/rock-paper-scissors-lizard-spock/</guid>
      <description>Rock Paper Scissors Lizard Spock 题意： Rock Paper Scissors Lizard Spock
有五种手势，类似于石头剪刀布，有两个串$s, t$,由这五种手势组成，从某个位置开始匹配，如果$t_i$能赢$s_j$得一分，求一个$pos(0\le pos \le len(s)-len(t))$，使得得分最多
Solution： 将上图记为$G$，如果$op_1$可以赢$op_2$，则$G(op_1, op_2)=1$,
枚举可以得分的手势,假设当前手势为$op$,
$$ \begin{aligned} t&amp;rsquo;_i &amp;amp;=(reverse\ t_i == op ? 1 : 0) \newline s&amp;rsquo;_i &amp;amp;= G[op][s_i] \end{aligned} $$
将$t&amp;rsquo;,s&amp;rsquo;$做卷积，累加每次的结果，再遍历一遍匹配的起始位置，取最大值
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>URAL - 1996</title>
      <link>https://Anlarry.github.io/posts/acm-icpc/ural-1996/</link>
      <pubDate>Tue, 11 Feb 2020 12:54:00 +0800</pubDate>
      
      <guid>https://Anlarry.github.io/posts/acm-icpc/ural-1996/</guid>
      <description>URAL - 1996 题意： URAL - 1996 给两个长度分别为$n, m$的字节串$A,B$，$A$串的最后一位可以修改，代价为$1$，求使得$B$串为$A$串字串的最小代价
Solution : 因为$A$串只有最后最后一位可以修改，所以可以用KMP求出可能匹配的位置，然后计算每个位置的$cost$
记$A$串最后一位构成的串为$a$， $B$串的为$b$, 假设$pos(0\le pos \le n-m)是可能匹配的位置$，如果将$b$反转得到$b&amp;rsquo;$, 在此处的的代价为
$$ \sum_{i+j=pos+m-1} [a_i \ne b&amp;rsquo;_j ] $$
而
$$ \sum_{i+j=posm-1} a_j * b&amp;rsquo;_j $$
可以算出来相等的$1$的个数$cnt_1$，再将$a,b$串取反，再做一次卷积就可以算出$0$相等的个数$cnt_2$，$ans=m-cnt_1-cnt_2$
#include &amp;lt;cstdio&amp;gt; #include &amp;lt;stack&amp;gt; #include &amp;lt;set&amp;gt; #include &amp;lt;cmath&amp;gt; #include &amp;lt;map&amp;gt; #include &amp;lt;time.h&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;string&amp;gt; #include &amp;lt;cstring&amp;gt; #include &amp;lt;algorithm&amp;gt; #include &amp;lt;memory.h&amp;gt; #include &amp;lt;cstdlib&amp;gt; #include &amp;lt;queue&amp;gt; #include &amp;lt;iomanip&amp;gt; #include &amp;lt;unordered_map&amp;gt; #define P pair&amp;lt;int, int&amp;gt; #define LL long long #define LD long double #define PLL pair&amp;lt;LL, LL&amp;gt; #define mset(a, b) memset(a, b, sizeof(a)) #define rep(i, a, b) for (int i = a; i &amp;lt; b; i++) #define PI acos(-1.</description>
    </item>
    
    <item>
      <title>Links</title>
      <link>https://Anlarry.github.io/links/</link>
      <pubDate>Thu, 01 Jan 1970 00:32:50 +0000</pubDate>
      
      <guid>https://Anlarry.github.io/links/</guid>
      <description>Friends 🐳 Wang Shuai, and his Github.
🐳 SHEN Haiyang, and his Github.
🐳 Peng Guanwen, and his Github.
🐳 Yiming Chen, and his Github.
🐳 Tao Wu, and his Github.
🐳 yuanya, and his Github.</description>
    </item>
    
    
    
  </channel>
</rss>
